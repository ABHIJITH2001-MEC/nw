server.c
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>

void *handle_client(void *arg) {
    int client_sock = *(int *)arg;
    char buffer[100];
    int k;

    while (1) {
        k = recv(client_sock, buffer, sizeof(buffer), 0);
        if (k == -1) {
            perror("Error in receiving");
            break;
        } else if (k == 0) {
            printf("Client disconnected.\n");
            break;
        }

        printf("Client sent: %s\n", buffer);

        // Broadcast the received message to all other connected clients
        for (int i = 4; i < FD_SETSIZE; i++) {
            if (i != client_sock && FD_ISSET(i, &all_sockets)) {
                k = send(i, buffer, strlen(buffer), 0);
                if (k == -1) {
                    perror("Error in sending");
                    break;
                }
            }
        }
    }

    close(client_sock);
    pthread_exit(NULL);
}

int main() {
    char buf[100];
    int k;
    socklen_t len;
    int sock_desc, client_sock;
    struct sockaddr_in server, client;
    fd_set all_sockets, read_sockets;
    int max_fd;

    sock_desc = socket(AF_INET, SOCK_STREAM, 0);
    if (sock_desc == -1) {
        perror("Error in socket creation");
        exit(EXIT_FAILURE);
    }

    server.sin_family = AF_INET;
    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons(3003);

    k = bind(sock_desc, (struct sockaddr *)&server, sizeof(server));
    if (k == -1) {
        perror("Error in binding");
        exit(EXIT_FAILURE);
    }

    k = listen(sock_desc, 5);
    if (k == -1) {
        perror("Error in listening");
        exit(EXIT_FAILURE);
    }

    FD_ZERO(&all_sockets);
    FD_SET(sock_desc, &all_sockets);
    max_fd = sock_desc;

    while (1) {
        read_sockets = all_sockets;
        k = select(max_fd + 1, &read_sockets, NULL, NULL, NULL);
        if (k == -1) {
            perror("Error in select");
            exit(EXIT_FAILURE);
        }

        if (FD_ISSET(sock_desc, &read_sockets)) {
            len = sizeof(client);
            client_sock = accept(sock_desc, (struct sockaddr *)&client, &len);
            if (client_sock == -1) {
                perror("Error in accepting");
                continue;
            }

            FD_SET(client_sock, &all_sockets);
            if (client_sock > max_fd) {
                max_fd = client_sock;
            }

            printf("Client connected.\n");
            
            pthread_t tid;
            pthread_create(&tid, NULL, handle_client, &client_sock);
        }
    }

    return 0;
}
//client.c
#include <sys/socket.h>
#include <netinet/in.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <pthread.h>

void *receive_messages(void *arg) {
    int sock_desc = *(int *)arg;
    char buffer[100];
    int k;

    while (1) {
        k = recv(sock_desc, buffer, sizeof(buffer), 0);
        if (k == -1) {
            perror("Error in receiving");
            break;
        } else if (k == 0) {
            printf("Server disconnected.\n");
            break;
        }

        printf("Server sent: %s\n", buffer);
    }

    pthread_exit(NULL);
}

int main() {
    char buf[100];
    int k;
    int sock_desc;
    struct sockaddr_in client;
    pthread_t tid;

    sock_desc = socket(AF_INET, SOCK_STREAM, 0);
    if (sock_desc == -1) {
        perror("Error in socket creation");
        exit(EXIT_FAILURE);
    }

    client.sin_family = AF_INET;
    client.sin_addr.s_addr = INADDR_ANY;
    client.sin_port = htons(3003);

    k = connect(sock_desc, (struct sockaddr *)&client, sizeof(client));
    if (k == -1) {
        perror("Error in connecting to server");
        exit(EXIT_FAILURE);
    }

    printf("Connected to server. Type 'exit' to quit.\n");

    pthread_create(&tid, NULL, receive_messages, &sock_desc);

    while (1) {
        fgets(buf, sizeof(buf), stdin);

        k = send(sock_desc, buf, strlen(buf), 0);
        if (k == -1) {
            perror("Error in sending");
            exit(EXIT_FAILURE);
        }

        if (strcmp(buf, "exit\n") == 0) {
            printf("Exiting...\n");
            break;
        }
    }

    pthread_cancel(tid); // Cancel the receiving thread
    close(sock_desc);
    return 0;
}

